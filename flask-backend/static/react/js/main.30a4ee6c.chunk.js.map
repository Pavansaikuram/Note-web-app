{"version":3,"sources":["components/navbar.jsx","components/notes.js","components/Fields.js","components/userprofile.jsx","components/login.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","onSubmit","props","updateAuth","localStorage","setItem","history","push","className","href","block","bsSize","type","onClick","this","Component","Notes","state","notes","axios","get","then","response","i","length","setState","console","log","map","c","GetNotes","Fields","values","handleSubmit","bind","el","key","value","onChange","handleChange","removeClick","event","target","prevState","splice","join","preventDefault","Fragment","createUI","addClick","UserProfile","full_name","getName","setName","name","Login","email","password","changeHandler","alert","placeholder","App","show","undefined","getItem","authenticated","path","render","to","exact","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"js/main.30a4ee6c.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass NavBar extends Component {\r\n  onSubmit = () => {\r\n    this.props.updateAuth(false);\r\n    localStorage.setItem(\"auth\", \"false\");\r\n    this.props.history.push(\"/\");\r\n  };\r\n  render() {\r\n    return (\r\n      <nav className=\"navbar navbar-light bg-light\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          <button block bsSize=\"large\" type=\"submit\" onClick={this.onSubmit}>\r\n            Logout\r\n          </button>\r\n        </a>\r\n      </nav>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nclass Notes extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { notes: [] };\r\n  }\r\n  GetNotes() {\r\n    axios.get(\"/getnotes\").then((response) => {\r\n      for (var i = 0; i < response[\"data\"].length; i++) {\r\n        this.state.notes.push(response[\"data\"][i]);\r\n      }\r\n    });\r\n    this.setState();\r\n    console.log(this.state.notes);\r\n    return <div>{this.state.notes.map((c) => ({ c }))}</div>;\r\n  }\r\n  render() {\r\n    return this.GetNotes();\r\n  }\r\n}\r\n\r\nexport default Notes;\r\n","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\nimport Notes from \"./notes\";\r\nclass Fields extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { values: [] };\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  //   GetNotes() {\r\n  //     // value = { ...this.state.values };\r\n  //     axios.get(\"/getnotes\").then((response) => {\r\n  //       for (var i = 0; i < response[\"data\"].length; i++) {\r\n  //         this.state.values.push(response[\"data\"][i]);\r\n  //       }\r\n  //     });\r\n  //     this.setState();\r\n  //     console.log(this.state.values);\r\n  //     return (\r\n  //       <div>\r\n  //         {this.state.values.map((c) => (\r\n  //           <ul>\r\n  //             <li>{c}</li>\r\n  //           </ul>\r\n  //         ))}\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  createUI() {\r\n    return this.state.values.map((el, i) => (\r\n      <div key={i}>\r\n        <input\r\n          type=\"text\"\r\n          value={el || \"\"}\r\n          onChange={this.handleChange.bind(this, i)}\r\n        />\r\n        <input\r\n          type=\"button\"\r\n          value=\"remove\"\r\n          onClick={this.removeClick.bind(this, i)}\r\n        />\r\n      </div>\r\n    ));\r\n  }\r\n\r\n  handleChange(i, event) {\r\n    let values = [...this.state.values];\r\n    values[i] = event.target.value;\r\n    this.setState({ values });\r\n  }\r\n\r\n  addClick() {\r\n    this.setState((prevState) => ({ values: [...prevState.values, \"\"] }));\r\n  }\r\n\r\n  removeClick(i) {\r\n    let values = [...this.state.values];\r\n    values.splice(i, 1);\r\n    this.setState({ values });\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    // alert(\"A name was submitted: \" + this.state.values.join(\", \"));\r\n    console.log(this.state.values.join(\",\"));\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <Notes />\r\n        <form onSubmit={this.handleSubmit}>\r\n          {this.createUI()}\r\n          <input\r\n            type=\"button\"\r\n            value=\"add more\"\r\n            onClick={this.addClick.bind(this)}\r\n          />\r\n          <input type=\"submit\" value=\"Submit\" />\r\n        </form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Fields;\r\n","var UserProfile = (function () {\r\n  var full_name = \"\";\r\n\r\n  var getName = function () {\r\n    return full_name; // Or pull this from cookie/localStorage\r\n  };\r\n\r\n  var setName = function (name) {\r\n    full_name = name;\r\n    // Also set this in cookie/localStorage\r\n  };\r\n\r\n  return {\r\n    getName: getName,\r\n    setName: setName,\r\n  };\r\n})();\r\n\r\nexport default UserProfile;\r\n","import React, { Component } from \"react\";\r\nimport \"./login.css\";\r\nimport UserProfile from \"./userprofile\";\r\n\r\nclass Login extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n  constructor() {\r\n    super();\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n  }\r\n  changeHandler = (event) => {\r\n    let name = event.target.name;\r\n    console.log(name);\r\n    this.setState({ [name]: event.target.value });\r\n  };\r\n  onSubmit = () => {\r\n    //console.log(this.state.email);\r\n    UserProfile.setName(\"authentication\");\r\n    console.log(\"hi pavan\" + UserProfile.getName());\r\n    if (\r\n      this.state.email === \"pavansaikuramsetti8@gmail.com\" &&\r\n      this.state.password === \"pavan\"\r\n    ) {\r\n      localStorage.setItem(\"auth\", \"true\");\r\n      this.props.updateAuth(true);\r\n      this.props.history.push(\"/nav/counters\");\r\n    } else {\r\n      alert(\"Register to sign in\");\r\n    }\r\n  };\r\n  render() {\r\n    console.log(\"login page\");\r\n    return (\r\n      <div className=\"Login\">\r\n        <form>\r\n          <input\r\n            type=\"text\"\r\n            name=\"email\" // <-- event.target.name is set to \"name\" here\r\n            placeholder=\"email\"\r\n            onChange={this.changeHandler}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            name=\"password\" // <-- event.target.name is set to \"name\" here\r\n            placeholder=\"password\"\r\n            onChange={this.changeHandler}\r\n          />\r\n          <br></br>\r\n          <button block bsSize=\"large\" type=\"submit\" onClick={this.onSubmit}>\r\n            Login\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport Navbar from \"./components/navbar\";\nimport \"./App.css\";\nimport Counters from \"./components/Fields\";\nimport Login from \"./components/login\";\nimport NavigationBar from \"./components/navbar\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport { HashRouter } from \"react-router-dom\";\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      show: false,\n    };\n  }\n  async componentDidMount() {\n    if (localStorage.getItem(\"auth\") === undefined) {\n      localStorage.setItem(\"auth\", \"false\");\n    } else if (localStorage.getItem(\"auth\") === \"true\") {\n      this.setState({ show: true });\n    }\n  }\n  render() {\n    console.log(\"App rendered\");\n    const authenticated = localStorage.getItem(\"auth\") === \"true\";\n    console.log(authenticated);\n    return (\n      <HashRouter className=\"container\">\n        <div className=\"App\">\n          {authenticated ? (\n            <Route\n              path=\"/nav\"\n              render={(props) => (\n                <NavigationBar\n                  {...props}\n                  //isAuthed={this.state.show}\n                  updateAuth={(show) => this.setState({ show })}\n                />\n              )}\n            ></Route>\n          ) : (\n            <Redirect to=\"/\" />\n          )}\n          <div>\n            {authenticated ? (\n              <Switch>\n                {/* <Route exact path=\"/\" component={Login} /> */}\n                <Route\n                  exact\n                  path=\"/nav/counters\"\n                  render={(props) => (\n                    <Counters\n                      {...props}\n                      //isAuthed={this.state.show}\n                      updateAuth={(show) => this.setState({ show })}\n                    />\n                  )}\n                />\n              </Switch>\n            ) : (\n              <Switch>\n                <Route\n                  exact\n                  path=\"/\"\n                  render={(props) => (\n                    <Login\n                      {...props}\n                      // isAuthed={this.state.show}\n                      updateAuth={(show) => this.setState({ show })}\n                    />\n                  )}\n                ></Route>\n              </Switch>\n            )}\n          </div>\n        </div>\n      </HashRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport Login from \"./components/login\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n//ReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}